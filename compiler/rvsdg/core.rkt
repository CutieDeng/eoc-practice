#lang racket/base

(require racket/struct racket/dict racket/match)

(require cutie-ftree)

(struct Primitive (op n m input output) #:transparent)
(struct Literal (v output) #:transparent)

(struct Gamma (n m input output argument result) #:transparent)
(struct Theta (m input output argument result) #:transparent)
(struct Lambda (n m r input output argument result) #:transparent)
(struct Omega (n m argument result) #:transparent)
(struct Phi (n m input output argument result) #:transparent)
(struct Delta (n input output argument result) #:transparent)

(struct Graph (node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent) #:transparent)

(define (create-literal graph v)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define node-cnt^ (+ node-cnt 1))
  (define output-cnt^ (+ output-cnt 1))
  (define output-loc^ (dict-set output-loc output-cnt node-cnt))
  (define node-obj (Literal v output-cnt))
  (define nodes^ (dict-set nodes node-cnt node-obj))
  (values 
    node-cnt
    node-obj
    (Graph node-cnt^ input-cnt output-cnt^ nodes^ input-src output-targets input-loc output-loc^ parent)
  )
)

(define (create-primitive graph tt n m)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define node-cnt^ (+ node-cnt 1))
  (define input-cnt^ (+ input-cnt n))
  (define output-cnt^ (+ output-cnt m))
  (define input-loc^ (dict-set input-loc input-cnt node-cnt))
  (define output-loc^ (dict-set output-loc output-cnt node-cnt))
  (define node-obj (Primitive tt n m input-cnt output-cnt))
  (define nodes^ (dict-set nodes node-cnt node-obj))
  (values 
    node-cnt
    node-obj
    (Graph node-cnt^ input-cnt^ output-cnt^ nodes^ input-src output-targets input-loc^ output-loc^ parent)
  )
)

(define (create-gamma graph n m)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define node-cnt^ (+ node-cnt 1))
  (define input-cnt^ (+ input-cnt 1 m))
  (define input-cnt^^ (+ input-cnt^ (* n m)))
  (define output-cnt^ (+ output-cnt m))
  (define output-cnt^^ (+ output-cnt^ (* n m)))
  (define input-loc^ (dict-set input-loc input-cnt node-cnt))
  (define output-loc^ (dict-set output-loc output-cnt node-cnt))
  (define gamma-input input-cnt)
  (define gamma-argument input-cnt^)
  (define gamma-output output-cnt)
  (define gamma-result output-cnt^)
  (define gamma (Gamma n m gamma-input gamma-output gamma-argument gamma-result))
  (define nodes^ (dict-set nodes node-cnt gamma))
  (values 
    node-cnt
    gamma
    (Graph node-cnt^ input-cnt^^ output-cnt^^ nodes^ input-src output-targets input-loc^ output-loc^ parent)
  ) 
)

(define (create-theta graph m)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define node-cnt^ (+ node-cnt 1))
  (define input-cnt^ (+ input-cnt m))
  (define input-cnt^^ (+ input-cnt^ 1 m))
  (define output-cnt^ (+ output-cnt m))
  (define output-cnt^^ (+ output-cnt^ m))
  (define input-loc^ (dict-set input-loc input-cnt node-cnt))
  (define output-loc^ (dict-set output-loc output-cnt node-cnt))
  (define theta-input input-cnt)
  (define theta-argument input-cnt^)
  (define theta-output output-cnt)
  (define theta-result output-cnt^)
  (define theta (Theta m theta-input theta-output theta-argument theta-result))
  (define nodes^ (dict-set nodes node-cnt theta))
  (values node-cnt
    theta
    (Graph node-cnt^ input-cnt^^ output-cnt^^ nodes^ input-src output-targets input-loc^ output-loc^ parent)
  )
)

(define (create-lambda graph n m r)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define node-cnt^ (+ node-cnt 1))
  (define input-cnt^ (+ input-cnt n))
  (define input-cnt^^ (+ input-cnt^ r))
  (define output-cnt^ (+ output-cnt 1))
  (define output-cnt^^ (+ output-cnt^ n m))
  (define input-loc^ (dict-set input-loc input-cnt node-cnt))
  (define output-loc^ (dict-set output-loc output-cnt node-cnt))
  (define lambda-input input-cnt)
  (define lambda-argument input-cnt^)
  (define lambda-output output-cnt)
  (define lambda-result output-cnt^)
  (define lambda^ (Lambda n m r lambda-input lambda-output lambda-argument lambda-result))  
  (define nodes^ (dict-set nodes node-cnt lambda^))
  (values node-cnt
    lambda^
    (Graph node-cnt^ input-cnt^^ output-cnt^^ nodes^ input-src output-targets input-loc^ output-loc^ parent)
  )
)

(define (create-omega graph n m)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define node-cnt^ (+ node-cnt 1))
  (define output-cnt^ (+ output-cnt n))
  (define input-cnt^ (+ input-cnt m))
  (define input-loc^ (dict-set input-loc input-cnt node-cnt))
  (define output-loc^ (dict-set output-loc output-cnt node-cnt))
  (define omega-argument output-cnt)
  (define omega-result input-cnt)
  (define omega (Omega n m omega-argument omega-result))
  (define nodes^ (dict-set nodes node-cnt omega))
  (values node-cnt
    omega
    (Graph node-cnt^ input-cnt^ output-cnt^ nodes^ input-src output-targets input-loc^ output-loc^ parent)
  )
)

(define (create-phi graph n m)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define node-cnt^ (+ node-cnt 1))
  (define input-cnt^ (+ input-cnt n))
  (define input-cnt^^ (+ input-cnt m))
  (define output-cnt^ (+ output-cnt m))
  (define output-cnt^^ (+ output-cnt n m))
  (define input-loc^ (dict-set input-loc input-cnt node-cnt))
  (define output-loc^ (dict-set output-loc output-cnt node-cnt))
  (define phi-input input-cnt)
  (define phi-output output-cnt)
  (define phi-argument input-cnt^)
  (define phi-result output-cnt^)
  (define phi (Phi n m phi-input phi-output phi-argument phi-result))
  (define nodes^ (dict-set nodes node-cnt phi))
  (values node-cnt
    phi
    (Graph node-cnt^ input-cnt^^ output-cnt^^ nodes^ input-src output-targets input-loc^ output-loc^ parent)
  )
)

(define (create-delta graph n)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define node-cnt^ (+ node-cnt 1))
  (define input-cnt^ (+ input-cnt n))
  (define input-cnt^^ (+ input-cnt 1))
  (define output-cnt^ (+ output-cnt 1))
  (define output-cnt^^ (+ output-cnt n))
  (define input-loc^ (dict-set input-loc input-cnt node-cnt))
  (define output-loc^ (dict-set output-loc output-cnt node-cnt))
  (define delta-input input-cnt)
  (define delta-output output-cnt)
  (define delta-argument input-cnt^)
  (define delta-result output-cnt^)
  (define delta (Delta n delta-input delta-output delta-argument delta-result))
  (define nodes^ (dict-set nodes node-cnt delta))
  (values node-cnt
    delta
    (Graph node-cnt^ input-cnt^^ output-cnt^^ nodes^ input-src output-targets input-loc^ output-loc^ parent)
  )
)

(define (connect-edge-raw graph src dst)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define input-src^ (dict-set input-src dst src))
  (define output-targets^ (dict-set output-targets src 
    (dict-set (dict-ref output-targets src (lambda () (ordl-make-empty integer-compare))) dst #t)))
  (Graph node-cnt input-cnt output-cnt nodes input-src^ output-targets^ input-loc output-loc parent)
)

(define (set-parent-raw graph src p)
  (match-define (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent)
    graph)
  (define parent^ (dict-set parent src p)) 
  (Graph node-cnt input-cnt output-cnt nodes input-src output-targets input-loc output-loc parent^)
)

(define (empty-graph)
  (define emp (ordl-make-empty integer-compare))
  (Graph 0 0 0 emp emp emp emp emp emp)
)

(provide empty-graph create-delta create-gamma create-theta create-phi create-omega
  create-literal create-lambda create-primitive
  (struct-out Graph)
  (struct-out Omega)
  (struct-out Phi)
  (struct-out Lambda)
  (struct-out Theta)
  (struct-out Gamma)
  (struct-out Delta)
  (struct-out Literal)
  (struct-out Primitive)
)

(provide connect-edge-raw set-parent-raw)
